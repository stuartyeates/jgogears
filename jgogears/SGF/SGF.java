/* Generated By:JavaCC: Do not edit this line. SGF.java */
package jgogears.SGF;

import java.util.*;

import jgogears.*;

public class SGF implements SGFConstants {

	final public Vector<SGFGameTree> collection() throws ParseException {
		SGFGameTree gameTree = null;
		Vector<SGFGameTree> games = new Vector<SGFGameTree>();
		label_1: while (true) {
			gameTree = gameTree();
			games.add(gameTree);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OPENR:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
		}
		{
			if (true)
				return games;
		}
		throw new Error("Missing return statement in function");
	}

	final public SGFGameTree gameTree() throws ParseException {
		SGFSequence sequence = null;
		SGFGameTree child = null;
		SGFGameTree result = new SGFGameTree();
		jj_consume_token(OPENR);
		sequence = sequence();
		result.sequence = sequence;
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OPENR:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_2;
			}
			child = gameTree();
			result.gameTrees.add(child);
		}
		jj_consume_token(CLOSER);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public SGFSequence sequence() throws ParseException {
		SGFSequence result = new SGFSequence();
		SGFNode node = null;
		label_3: while (true) {
			node = node();
			result.add(node);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SEMI:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_3;
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public SGFNode node() throws ParseException {
		SGFNode result = new SGFNode();
		SGFProperty prop = null;
		jj_consume_token(SEMI);
		label_4: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NAME:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_4;
			}
			prop = prop();
			result.properties.add(prop);
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public SGFProperty prop() throws ParseException {
		Token name = null;
		Token value = null;
		SGFProperty result = new SGFProperty();
		name = jj_consume_token(NAME);
		result.setIdentifier(new String(name.image));
		label_5: while (true) {
			value = jj_consume_token(VALUE);
			result.getValues().add(value.image);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case VALUE:
				;
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_5;
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	public SGFTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[5];
	static private int[] jj_la1_0;
	static {
		jj_la1_0();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] { 0x40, 0x40, 0x20, 0x100, 0x200, };
	}

	public SGF(java.io.InputStream stream) {
		this(stream, null);
	}

	public SGF(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new SGFTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public SGF(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new SGFTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public SGF(SGFTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(SGFTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.Vector jj_expentries = new java.util.Vector();
	private int[] jj_expentry;
	private int jj_kind = -1;

	public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[10];
		for (int i = 0; i < 10; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 5; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 10; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
